@{
    ViewData["Title"] = "Mappa dei Punti di Interesse Dinamica";
}

<h2>@ViewData["Title"]</h2>

<script src="https://cdn.jsdelivr.net/npm/ol@7.3.0/dist/ol.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol@7.3.0/ol.css" />

<style>
    #map {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 90%;
    }

    .top-controls {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        z-index: 10;
        background: rgba(255,255,255,0.95);
        padding: 10px;
        border-radius: 6px;
        box-shadow: 0 0 5px rgba(0,0,0,0.2);
    }

        .top-controls button {
            margin: 5px 3px;
            padding: 6px 12px;
            font-size: 14px;
            cursor: pointer;
        }

    #infoSidebar, #addSidebar {
        position: absolute;
        top: 0;
        right: 0;
        width: 300px;
        height: 100%;
        background: rgba(255,255,255,0.95);
        padding: 16px;
        border-left: 1px solid #ccc;
        display: none;
        overflow-y: auto;
        z-index: 11;
    }


    #categoryMenu {
        position: absolute;
        top: 80px;
        left: 10px;
        width: 280px;
        max-height: 60%;
        background: rgba(255,255,255,0.95);
        padding: 16px;
        border: 1px solid #ccc;
        display: none;
        overflow-y: auto;
        z-index: 11;
    }
</style>


<div id="map"></div>

<div class="top-controls">
    <button onclick="addPoint()">Add New Point</button>
    <button onclick="enablePointEditMode()">✏️ Modify a POI</button>
    <button onclick="enableSpatialFilter()">🔍 Spatial Filter</button>
    <button onclick="openCategorySelector()">Filter by Category</button>
    <button onclick="loadAllPoints()">Show All Points</button>
    <button onclick="radiusSearchMode()">🔘 Radius Search</button>
    <button onclick="nearestSearchMode()">📍 Nearest POI</button>
    <button onclick="clearAllVectorSources()">Clear All</button>
</div>


@*Sidebar che mostra le info di un punto*@
<div id="infoSidebar">
    <h3>Point Info</h3>
    <p><strong>Name:</strong> <span id="infoName"></span></p>
    <p><strong>Description:</strong> <span id="infoDescription"></span></p>
    <p><strong>Latitude:</strong> <span id="infoLat"></span></p>
    <p><strong>Longitude:</strong> <span id="infoLon"></span></p>
    <p><strong>Categories:</strong> <span id="infoCat"></span></p>
    <input type="hidden" id="infoPointId" />
    <button onclick="closeSidebar()">Close</button>
    <button id="deletePointButton" style="background: red; color: white; padding: 5px 10px;border: none;" onclick="deletePoint()">Delete Point </button>
</div>


@*Menu delle categorie*@
<div id="categoryMenu">
    <p>Select the points you desire to see!</p>
    <label><input type="checkbox" value="0"> Generic</label><br>
    <label><input type="checkbox" value="1"> Drinking Water</label><br>
    <label><input type="checkbox" value="2"> Shelter</label><br>
    <label><input type="checkbox" value="3"> Toilet</label><br>
    <label><input type="checkbox" value="4"> Restaurant</label><br>
    <label><input type="checkbox" value="5"> Bar</label><br>
    <label><input type="checkbox" value="6"> Viewpoint</label><br>
    <label><input type="checkbox" value="7"> Camp Site</label><br>
    <label><input type="checkbox" value="8"> Bench</label><br>
    <label><input type="checkbox" value="9"> Info</label><br>
    <label><input type="checkbox" value="10"> Parking</label><br>
    <label><input type="checkbox" value="11"> Picnic Site</label><br>
    <label><input type="checkbox" value="12"> Fireplace</label><br>
    <label><input type="checkbox" value="13"> Ruin</label><br>
    <label><input type="checkbox" value="14"> Summit</label><br>
    <label><input type="checkbox" value="15"> Waterfall</label><br>
    <label><input type="checkbox" value="16"> Bridge</label><br>
    <label><input type="checkbox" value="17"> Gate</label><br>
    <label><input type="checkbox" value="18"> Cross</label><br>
    <label><input type="checkbox" value="19"> Cave</label><br>
    <label><input type="checkbox" value="20"> Danger</label><br>
    <label><input type="checkbox" value="21"> Signpost</label><br><br>
    <button onclick="loadSelectedCategories()">Load Points</button>
    <button style="background:darkred; color: white" onclick="closeCategorySelector()">Exit</button>
</div>



@* Side bar che viene mostata quando si aggiunge un punto*@
<div id="addSidebar">
    <h3>Add New Point</h3>
    <form id="addPointForm" onsubmit="submitNewPoint(event)">
        <label for="pointName">Name:</label><br />
        <input type="text" id="pointName" name="pointName" required /><br /><br />

        <label for="pointDescription">Description:</label><br />
        <textarea id="pointDescription" name="pointDescription"></textarea><br /><br />

        <label for="pointCategories">Category:</label><br />
        <select id="pointCategories" name="pointCategories" multiple required size="6">
            <option value="Generic">Generic</option>
            <option value="DrinkingWater">Drinking Water</option>
            <option value="Shelter">Shelter</option>
            <option value="Toilet">Toilet</option>
            <option value="Restaurant">Restaurant</option>
            <option value="Bar">Bar</option>
            <option value="Viewpoint">Viewpoint</option>
            <option value="CampSite">Camp Site</option>
            <option value="Bench">Bench</option>
            <option value="Info">Info</option>
            <option value="Parking">Parking</option>
            <option value="PicnicSite">Picnic Site</option>
            <option value="Fireplace">Fireplace</option>
            <option value="Ruin">Ruin</option>
            <option value="Summit">Summit</option>
            <option value="Waterfall">Waterfall</option>
            <option value="Bridge">Bridge</option>
            <option value="Gate">Gate</option>
            <option value="Cross">Cross</option>
            <option value="Cave">Cave</option>
            <option value="Danger">Danger</option>
            <option value="Signpost">Signpost</option>
        </select><br /><small>Hold Ctrl (or Cmd) to select multiple</small><br /><br />

        <input type="hidden" id="pointLat" />
        <input type="hidden" id="pointLon" />

        <button type="submit">Add Point</button>
        <button type="button" onclick="cancelAdd()">Cancel</button>
    </form>
</div>




<script>
    // -- Inizializzazione OpenLayers ------------------------------------------
    const vectorSource = new ol.source.Vector();
    const vectorLayer = new ol.layer.Vector({
        source: vectorSource,
        style: feature => defaultStyle()  // stile di default per i POI
    });
    const circleSource = new ol.source.Vector();
    const circleLayer = new ol.layer.Vector({
        source: circleSource,
        style: circleStyle
    });
    const map = new ol.Map({
        target: 'map',
        layers: [
            new ol.layer.Tile({ source: new ol.source.OSM() }),
            vectorLayer,
            circleLayer
        ],
        view: new ol.View({
            center: ol.proj.fromLonLat([12.5, 42.5]),
            zoom: 6
        })
    });

    // Stili
    function defaultStyle() {
        return new ol.style.Style({
            image: new ol.style.Circle({ radius: 5, fill: new ol.style.Fill({ color: 'green' }) })
        });
    }
    function highlightStyle() {
        return new ol.style.Style({
            image: new ol.style.Circle({ radius: 7, fill: new ol.style.Fill({ color: 'red' }) })
        });
    }
    function circleStyle() {
        return new ol.style.Style({
            stroke: new ol.style.Stroke({ color: 'blue', width: 2, lineDash: [4,4] })
        });
    }

    // -- Helper per GeoJSON --------------------------------------------------
    async function fetchAndRender(url, styleFn = defaultStyle) {
        const res = await fetch(url);
        const fc = await res.json();
        const format = new ol.format.GeoJSON();
        const features = format.readFeatures(fc, { featureProjection: 'EPSG:3857' });
        vectorSource.clear();
        features.forEach(f => f.setStyle(styleFn(f)));
        vectorSource.addFeatures(features);
    }
    async function fetchAndAdd(url, styleFn = defaultStyle) {
        const res = await fetch(url);
        const fc = await res.json();
        const format = new ol.format.GeoJSON();
        const features = format.readFeatures(fc, { featureProjection: 'EPSG:3857' });
        features.forEach(f => f.setStyle(styleFn(f)));
        vectorSource.addFeatures(features);
    }

    // -- Utility per estensione della mappa ----------------------------------
    function getMapBBox() {
        const ext = map.getView().calculateExtent(map.getSize());
        const bl = ol.proj.toLonLat([ext[0], ext[1]]);
        const tr = ol.proj.toLonLat([ext[2], ext[3]]);
        return { minLon: bl[0], minLat: bl[1], maxLon: tr[0], maxLat: tr[1] };
    }

    // -- Pulsanti principali --------------------------------------------------
    function clearAllVectorSources() {
        map.getLayers().forEach(layer => {
            const src = layer.getSource?.();
            if (src instanceof ol.source.Vector) src.clear();
        });
    }
    function loadAllPoints() {
        const bbox = getMapBBox();
        const url = `/api/pointsofinterestsapi?minLon=${bbox.minLon}&minLat=${bbox.minLat}&maxLon=${bbox.maxLon}&maxLat=${bbox.maxLat}`;
        fetchAndRender(url);
    }
    // categorie
    function openCategorySelector() { document.getElementById("categoryMenu").style.display = "block"; }
    function closeCategorySelector() { document.getElementById("categoryMenu").style.display = "none"; }
    async function loadSelectedCategories() {
        clearAllVectorSources();
        const checks = document.querySelectorAll('#categoryMenu input[type="checkbox"]:checked');
        const cats = Array.from(checks).map(cb => cb.value);
        for (let cat of cats) {
            const url = `/api/pointsofinterestsapi/points?category=${cat}`;
            fetchAndAdd(url, f => {
                const color = getColorForCategory(cat);
                return new ol.style.Style({
                    image: new ol.style.Circle({ radius: 5, fill: new ol.style.Fill({ color }) })
                });
            });
        }
        closeCategorySelector();
    }
    function getColorForCategory(cat) {
        const mapping = {
            Generic:'#808080', DrinkingWater:'#1E90FF', Shelter:'#A0522D', Toilet:'#8B0000',
            Restaurant:'#FF4500', Bar:'#FF69B4', Viewpoint:'#FFD700', CampSite:'#228B22',
            Bench:'#A9A9A9', Info:'#00CED1', Parking:'#2F4F4F', PicnicSite:'#32CD32',
            Fireplace:'#B22222', Ruin:'#708090', Summit:'#8A2BE2', Waterfall:'#00BFFF',
            Bridge:'#A52A2A', Gate:'#6B8E23', Cross:'#DAA520', Cave:'#696969',
            Danger:'#DC143C', Signpost:'#4169E1'
        };
        return mapping[cat] || '#000000';
    }

    // -- Info popup e cancellazione ------------------------------------------
    map.on('singleclick', evt => {
        map.forEachFeatureAtPixel(evt.pixel, (feat) => {
            const props = feat.getProperties();
            // prendi le coordinate dalla geometry e trasformale in lon/lat
            const coord3857 = feat.getGeometry().getCoordinates();
            const [lon, lat] = ol.proj.toLonLat(coord3857);

            document.getElementById('infoName').textContent    = props.name || '';
            document.getElementById('infoLat').textContent     = lat.toFixed(6);
            document.getElementById('infoLon').textContent     = lon.toFixed(6);
            document.getElementById('infoCat').textContent     = (props.categories || []).join(', ');
            document.getElementById('infoPointId').value       = props.id;
            document.getElementById('infoDescription').textContent = props.description || '';
            document.getElementById('infoSidebar').style.display = 'block';
        });
    });


    map.on('click', evt => {
        const feature = map.forEachFeatureAtPixel(evt.pixel, (f, l) => l === vectorLayer ? f : null);
        if (!feature) closeSidebar();
    });
    function closeSidebar() { document.getElementById('infoSidebar').style.display = 'none'; }

    async function deletePoint() {
        const id = document.getElementById('infoPointId').value;
        if (!id || !confirm("Sei sicuro di voler eliminare questo punto?")) return;
        const res = await fetch(`/api/pointsofinterestsapi/points/${id}`, { method: 'DELETE' });
        if (res.ok) {
             alert("Punto eliminato");
             closeSidebar();
             const feat = vectorSource.getFeatures().find(f => f.get('id') == id);
             if (feat) vectorSource.removeFeature(feat);
        } else {
            alert("Eliminazione fallita");
        }
    }

    // -- Aggiunta nuovo punto ------------------------------------------------
    let addMode = false;
    function addPoint() {
        addMode = true;
        alert("Click map to place new POI");
    }
    map.on('click', evt => {
        if (!addMode) return;
        const coord = ol.proj.toLonLat(evt.coordinate);
        document.getElementById('pointLon').value = coord[0];
        document.getElementById('pointLat').value = coord[1];
        document.getElementById('addSidebar').style.display = 'block';
        addMode = false;
    });
    function cancelAdd() {
        document.getElementById('addSidebar').style.display = 'none';
        addMode = false;
    }
    async function submitNewPoint(e) {
        e.preventDefault();
        const name = e.target.pointName.value;
        const desc = e.target.pointDescription.value;
        const lat = parseFloat(e.target.pointLat.value);
        const lon = parseFloat(e.target.pointLon.value);
        const cats = Array.from(e.target.pointCategories.selectedOptions).map(o=>o.value);
        const body = { name, description: desc, latitude: lat, longitude: lon, categories: cats };
        const res = await fetch('/api/pointsofinterestsapi/post',{
            method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)
        });
        if(res.ok){
            alert("Added"); cancelAdd(); loadAllPoints();
        } else alert("Add failed");
    }

    // -- Edit esistente ------------------------------------------------------
    function enablePointEditMode() {
        const feats = vectorSource.getFeatures().filter(f => f.getGeometry() instanceof ol.geom.Point);
        const modify = new ol.interaction.Modify({ features: new ol.Collection(feats) });
        map.addInteraction(modify);
        modify.on('modifyend', async evt => {
            for (let f of evt.features.getArray()) {
                const c = ol.proj.toLonLat(f.getGeometry().getCoordinates());
                const id = f.get('id');
                await fetch(`/api/pointsofinterestsapi/points/${id}`,{
                    method:'PUT',headers:{'Content-Type':'application/json'},
                    body: JSON.stringify({ latitude:c[1], longitude:c[0] })
                });
            }
            alert("Updated"); map.removeInteraction(modify);
        });
    }

    // -- Filtro spaziale ----------------------------------------------------
    let drawFilter = null;
    function enableSpatialFilter() {
        if (addMode) { alert("Finish adding first"); return; }
        if (drawFilter) map.removeInteraction(drawFilter);
        drawFilter = new ol.interaction.Draw({ source: circleSource, type: 'Polygon' });
        map.addInteraction(drawFilter);
        drawFilter.on('drawend', async ev => {
            const coords = ev.feature.getGeometry().getCoordinates()[0]
                            .map(c=>ol.proj.toLonLat(c));
            const geojson = { type:'Polygon', coordinates:[coords] };
            const res = await fetch('/api/pointsofinterestsapi/spatialfilter',{
                method:'POST',headers:{'Content-Type':'application/json'},
                body: JSON.stringify({ geometry: geojson })
            });
            const fc = await res.json();
            const format = new ol.format.GeoJSON();
            const feats = format.readFeatures(fc, { featureProjection:'EPSG:3857' });
            vectorSource.clear();
            feats.forEach(f=>f.setStyle(defaultStyle()));
            vectorSource.addFeatures(feats);
            map.removeInteraction(drawFilter); drawFilter = null;
        });
        alert("Draw polygon to filter");
    }

    // -- Cerca per raggio ---------------------------------------------------
    async function radiusSearchMode() {
        alert('Click center for radius');
        map.once('click', async ev => {
            circleSource.clear(); vectorSource.clear();
            const centerPx = ev.coordinate;
            const [lon,lat] = ol.proj.toLonLat(ev.coordinate);
            const r = parseFloat(prompt('Radius (m):','500'));
            if (isNaN(r)) return alert('Invalid');
            circleSource.addFeature(new ol.Feature(new ol.geom.Circle(centerPx, r)));
            const res = await fetch(`/api/pointsofinterestsapi/nearby?longitude=${lon}&latitude=${lat}&radiusMeters=${r}`);
            const fc = await res.json();
            const format = new ol.format.GeoJSON();
            const feats = format.readFeatures(fc, { featureProjection:'EPSG:3857' });
            feats.forEach(f=>f.setStyle(highlightStyle()));
            vectorSource.addFeatures(feats);
            alert(`Found ${feats.length}`);
        });
    }

    // -- Nearest N -----------------------------------------------------------
    async function nearestSearchMode() {
        const n = parseInt(prompt('How many nearest?','5'));
        if (isNaN(n)||n<1) return alert('Invalid');
        alert('Click reference point');
        map.once('singleclick', async ev => {
            const [lon,lat] = ol.proj.toLonLat(ev.coordinate);
            const res = await fetch(`/api/pointsofinterestsapi/nearest?longitude=${lon}&latitude=${lat}&count=${n}`);
            const fc = await res.json();
            const format = new ol.format.GeoJSON();
            const feats = format.readFeatures(fc, { featureProjection:'EPSG:3857' });
            vectorSource.clear();
            feats.forEach(f=>f.setStyle(highlightStyle()));
            vectorSource.addFeatures(feats);
        });
    }
</script>


