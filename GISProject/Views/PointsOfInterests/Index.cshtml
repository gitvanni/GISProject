@{
    ViewData["Title"] = "Mappa dei Punti di Interesse Dinamica";
}

<h2>@ViewData["Title"]</h2>

<script src="https://cdn.jsdelivr.net/npm/ol@7.3.0/dist/ol.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol@7.3.0/ol.css" />

@*Stile per i pulsanti che permettono di ottenere i punti di una certa categoria*@
<style>
    .category-buttons {
        margin-bottom: 1rem;
        display: flex;
        gap: 1rem;
        justify-content: center;
    }

    .category-buttons a {
        text-decoration: none;
        padding: 10px 20px;
        background-color: #0078D7;
        color: white;
        border-radius: 5px;
        font-weight: bold;
        transition: background-color 0.3s;
    }

    .category-buttons a:hover {
        background-color: #005fa3;
    }
</style>

@*Pulsanti per ottenere i punti in base alla categoria. Di seguito ho messo solo le categorie che hoi nel DB.*@
<div class="category-buttons">
    <a href="#" onclick="loadPoint('21')">Show Signposts</a>
    <a href="#" onclick="loadPoint('20')">Show Danger Points</a>
    <a href="#" onclick="loadPoint('9')">Show Info Points</a>
    <a href="#" onclick="loadPoint('1')">Show New Point</a> 
</div>


@*Sidebar che mostra le info di un punto*@
<div id="infoSidebar" style="
  position: absolute;
  top: 0;
  right: 0;
  width: 300px;
  height: 100%;
  background-color: white;
  border-left: 1px solid #ccc;
  box-shadow: -2px 0 5px rgba(0,0,0,0.1);
  padding: 16px;
  display: none;
  z-index: 1000;
">
    <h3>Point Info</h3>
    <p><strong>Name:</strong> <span id="infoName"></span></p>
    <p><strong>Latitude:</strong> <span id="infoLat"></span></p>
    <p><strong>Longitude:</strong> <span id="infoLon"></span></p>
    <p><strong>Categories:</strong> <span id="infoCat"></span></p>
    <input type="hidden" id="infoPointId" />
    <button onclick="closeSidebar()">Close</button>
    <button onclick="deletePoint()" style="background: red; color: white; padding: 5px 10px; border: none;">Delete Point</button>
</div>

@*Pulsante che permtte di aggiungere un punto*@
<button onclick="enableAddMode()">Add New Point</button>
<button onclick="enablePointEditMode()">✏️ Modify a POI</button>
<button onclick="enableSpatialFilter()">🔍 Spatial Filter</button>


@* Side bar che viene mostata quando si aggiunge un punto*@
<div id="addSidebar" style="display: none; position: absolute; right: 0; top: 0; width: 300px; background: #f8f8f8; padding: 20px; border-left: 1px solid #ccc;">
    <h3>Add New Point</h3>
    <form id="addPointForm" onsubmit="submitNewPoint(event)">
        <label for="pointName">Name:</label><br />
        <input type="text" id="pointName" name="pointName" required /><br /><br />

        <label for="pointDescription">Description:</label><br />
        <textarea id="pointDescription" name="pointDescription"></textarea><br /><br />

        <label for="pointCategories">Category:</label><br />
        <select id="pointCategories" name="pointCategories" multiple required size="4">
            <option value="Bar">Bar</option>
            <option value="Museum">Museum</option>
            <option value="Park">Park</option>
            <option value="Signpost">Signpost</option>
            <option value="DangerPoint">DangerPoint</option>
            <!-- Add more if needed -->
        </select><br /><small>Hold Ctrl (or Cmd) to select multiple</small><br /><br />

        <input type="hidden" id="pointLat" />
        <input type="hidden" id="pointLon" />

        <button type="submit">Add Point</button>
        <button type="button" onclick="cancelAdd()">Cancel</button>
    </form>
</div>


<div id="map" style="width: 100%; height: 600px;"></div>

<script>
    let vectorSource = new ol.source.Vector();

    const vectorLayer = new ol.layer.Vector({
        source: vectorSource,
        style: new ol.style.Style({
            image: new ol.style.Circle({
                radius: 3,
                fill: new ol.style.Fill({ color: 'green' }),
                stroke: null
            })
        })
    });

    const map = new ol.Map({
        target: 'map',
        layers: [
            new ol.layer.Tile({ source: new ol.source.OSM() }),
            vectorLayer
        ],
        view: new ol.View({
            center: ol.proj.fromLonLat([12.5, 42.5]),
            zoom: 6
        })
    });

    //di seguito le versioni vecchie per aggiungere un punto, andranno rimosse successivamente

/*
    async function savePointToDb(lat, lon) {
        const data = {
            name: "User Point", 
            geometry: {
                type: "Point",
                coordinates: [lon, lat]
            },
            poiCategories: [
                {
                    category: "1" 
                }
            ]
        };

        console.log(data);

        const response = await fetch('../../api/pointsofinterestsapi/post', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
        console.log(response);
        if (response.ok) {
            alert("Point saved!");
        } else {
            alert("Error saving point.");
        }
    }
*/

    
    /*
    //Ogni volta che l'utente clicca la mappa viene chiamata la funzione per aggiungere il punto
    map.on('click', async function (event) {
            const coordinate = ol.proj.toLonLat(event.coordinate);
            const lon = coordinate[0];
            const lat = coordinate[1];

            // Draw point on map
            const feature = new ol.Feature({
                geometry: new ol.geom.Point(event.coordinate)
            });
            vectorLayer.getSource().addFeature(feature);

            // Save to DB
            await savePointToDb(lat, lon);
        });
*/


    //evento che permette di visualizzare la sidebar se si clicca su un punto
    map.on('singleclick', function (evt) {
      map.forEachFeatureAtPixel(evt.pixel, function (feature, layer) {
        if (layer === vectorLayer) {
          // Extract info
          const name = feature.get('name');
          const lat = feature.get('latitude');
          const lon = feature.get('longitude');
          const cat = feature.get('categories');
          const id = feature.get('id');
             
          // Fill in the sidebar
          document.getElementById('infoName').textContent = name;
          document.getElementById('infoLat').textContent = lat.toFixed(6);
          document.getElementById('infoLon').textContent = lon.toFixed(6);
          document.getElementById('infoCat').textContent = cat.join(',');
          document.getElementById('infoPointId').value = id;

          // Show the sidebar
          document.getElementById('infoSidebar').style.display = 'block';
        }
      });
    });


    //funzione per chiudere la sidebar delle info del punto
    function closeSidebar() {
         document.getElementById('infoSidebar').style.display = 'none';
    }



     map.on('click', function (evt) {
         const feature = map.forEachFeatureAtPixel(evt.pixel, (f, l) => l === vectorLayer ? f : null);
         if (!feature) {
             closeSidebar();
         }
     });


     //variabile di supporto. se è false non è possibile aggiungere un punto cliccando sulla mappa
     let addMode = false;


    //funzione di supporto per abilitare l'aggiunta di un punto
    function enableAddMode() {
        addMode = true;
        alert("Click on the map to add a new point.");
    }



    //se la addmode è true cliccando sulla mappa si può aggiungere un punto 
    map.on('click', function (evt) {
        if (!addMode) return;

        const coords = ol.proj.toLonLat(evt.coordinate);
        const lon = coords[0].toFixed(6);
        const lat = coords[1].toFixed(6);

        document.getElementById('pointLat').value = lat;
        document.getElementById('pointLon').value = lon;
        document.getElementById('addSidebar').style.display = 'block';

        addMode = false; // reset add mode
    });


    //funzione per caricare punti in base alla categoria
    async function loadPoint(param){
        const url = `../../api/pointsofinterestsapi/points?category=${param}`;
        const response = await fetch(url);
        
        const pois = await response.json();
        console.log(pois)
        const features = pois.map(poi => {
            const geometry = new ol.geom.Point(ol.proj.fromLonLat([poi.longitude, poi.latitude]));
            const feature = new ol.Feature({ geometry, name: poi.name, id: poi.id, latitude: poi.latitude, longitude: poi.longitude, categories: poi.categories });
            return feature;
        });

        vectorSource.clear();
        vectorSource.addFeatures(features);
    }


    //funzione per eliminare un punto selezionato
    async function deletePoint() {
        const id = document.getElementById('infoPointId').value;
        if (!id) return;

        const confirmed = confirm("Are you sure you want to delete this point?");
        if (!confirmed) return;

        const response = await fetch(`/api/pointsofinterestsapi/points/${id}`, {
            method: 'DELETE'
        });

        if (response.ok) {
            alert("Point deleted.");
            document.getElementById('infoSidebar').style.display = 'none';
            // Optional: remove point from map
            const feature = vectorLayer.getSource().getFeatures().find(f => f.get('id') == id);
            if (feature) vectorLayer.getSource().removeFeature(feature);
        } else {
            alert("Failed to delete point.");
        }
}


    //Funzione per aggiungere un punto tramite il form
    async function submitNewPoint(event) {
        event.preventDefault();

        const name = document.getElementById('pointName').value;
        const description = document.getElementById('pointDescription').value;
        const lat = parseFloat(document.getElementById('pointLat').value);
        const lon = parseFloat(document.getElementById('pointLon').value);

        const select = document.getElementById('pointCategories');
        const selected = Array.from(select.selectedOptions).map(option => option.value);

        if (selected.length === 0) {
            alert("Please select at least one category.");
            return;
        }

        const data = {
            name,
            description,
            latitude: lat,
            longitude: lon,
            categories: selected // <-- important
        };

        console.log(data)

        const response = await fetch('../../api/pointsofinterestsapi/post', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            alert("Point added successfully!");
            document.getElementById('addSidebar').style.display = 'none';
            document.getElementById('addPointForm').reset();
            // Optionally add the new point to the map
        } else {
            alert("Failed to add point.");
        }
    }

    //Funzione di supporto. Disabilita la addMode e nasconde la sidebar per l'aggiunta
    function cancelAdd() {
        document.getElementById('addSidebar').style.display = 'none';
        addMode = false;
    }

        function enablePointEditMode() {
        const pointFeatures = vectorSource.getFeatures().filter(f => f.getGeometry() instanceof ol.geom.Point);
        const modify = new ol.interaction.Modify({ features: new ol.Collection(pointFeatures) });
        map.addInteraction(modify);

        modify.on('modifyend', async e => {
            for (const f of e.features.getArray()) {
                const coords = ol.proj.toLonLat(f.getGeometry().getCoordinates());
                const id = f.get('id');

                await fetch(`/api/pointsofinterestsapi/points/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ latitude: coords[1], longitude: coords[0] })
                });
            }
            alert("Punti aggiornati");
            map.removeInteraction(modify);
        });
    }

        let drawFilterInteraction = null;

    function enableSpatialFilter() {
        if (drawFilterInteraction) {
            map.removeInteraction(drawFilterInteraction);
        }

        drawFilterInteraction = new ol.interaction.Draw({
            source: new ol.source.Vector(),
            type: 'Polygon'
        });

        map.addInteraction(drawFilterInteraction);

        drawFilterInteraction.on('drawend', async (event) => {
            const feature = event.feature;
            const geom = feature.getGeometry();
            const coords = geom.getCoordinates()[0].map(c => ol.proj.toLonLat(c));

            const geometryGeoJSON = {
                type: 'Polygon',
                coordinates: [coords]
            };

            const response = await fetch('/api/pointsofinterestsapi/spatialfilter', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ geometry: geometryGeoJSON })
            });

            const pois = await response.json();

            const features = pois.map(poi => {
                const geometry = new ol.geom.Point(ol.proj.fromLonLat([poi.longitude, poi.latitude]));
                return new ol.Feature({
                    geometry,
                    name: poi.name,
                    id: poi.id,
                    latitude: poi.latitude,
                    longitude: poi.longitude,
                    categories: poi.categories
                });
            });

            vectorSource.clear();
            vectorSource.addFeatures(features);

            map.removeInteraction(drawFilterInteraction);
            drawFilterInteraction = null;
        });

        alert("Disegna un poligono per filtrare i POI");
    }

</script>
