<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <title>@ViewData["Title"]</title>
    <script src="https://cdn.jsdelivr.net/npm/ol@7.3.0/dist/ol.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol@7.3.0/ol.css" />
    <style>
        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
            width: 100%;
            overflow: hidden;
            font-family: sans-serif;
        }

        #map {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        .top-controls {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 10;
            background: rgba(255,255,255,0.95);
            padding: 10px;
            border-radius: 6px;
            box-shadow: 0 0 5px rgba(0,0,0,0.2);
        }

            .top-controls button {
                margin: 5px 3px;
                padding: 6px 12px;
                font-size: 14px;
                cursor: pointer;
            }

        #infoSidebar, #addSidebar {
            position: absolute;
            top: 0;
            right: 0;
            width: 300px;
            height: 100%;
            background: rgba(255,255,255,0.95);
            padding: 16px;
            border-left: 1px solid #ccc;
            display: none;
            overflow-y: auto;
            z-index: 11;
        }

        #categoryMenu {
            position: absolute;
            top: 80px;
            left: 10px;
            width: 280px;
            max-height: 60%;
            background: rgba(255,255,255,0.95);
            padding: 16px;
            border: 1px solid #ccc;
            display: none;
            overflow-y: auto;
            z-index: 11;
        }

        #addSidebar select[multiple] {
            width: 100%;
        }
    </style>
</head>
<body>
    <div id="map"></div>
    <div class="top-controls">
        <button onclick="addPoint()">Add New Point</button>
        <button onclick="enablePointEditMode()">✏️ Modify a POI</button>
        <button onclick="enableSpatialFilter()">🔍 Spatial Filter</button>
        <button onclick="openCategorySelector()">Filter by Category</button>
        <button onclick="loadAllPoints()">Show All Points</button>
        <button onclick="radiusSearchMode()">🔘 Radius Search</button>
        <button onclick="nearestSearchMode()">📍 Nearest POI</button>
        <button onclick="clearAllVectorSources()">Clear All</button>
    </div>

    <div id="infoSidebar">
        <h3>Point Info</h3>
        <p><strong>Name:</strong> <span id="infoName"></span></p>
        <p><strong>Latitude:</strong> <span id="infoLat"></span></p>
        <p><strong>Longitude:</strong> <span id="infoLon"></span></p>
        <p><strong>Categories:</strong> <span id="infoCat"></span></p>
        <input type="hidden" id="infoPointId">
        <button onclick="closeInfoSidebar()">Close</button>
        <button onclick="deletePoint()" style="background:red;color:white;">Delete Point</button>
    </div>

    <div id="addSidebar">
        <h3>Add New Point</h3>
        <form id="addPointForm" onsubmit="submitNewPoint(event)">
            <label>Name:</label><br><input type="text" id="pointName" required><br><br>
            <label>Description:</label><br><textarea id="pointDescription"></textarea><br><br>
            <label>Category:</label><br>
            <select id="pointCategories" multiple required size="6">
                <option value="Generic">Generic</option>
                <option value="DrinkingWater">Drinking Water</option>
                <option value="Shelter">Shelter</option>
                <option value="Toilet">Toilet</option>
                <option value="Restaurant">Restaurant</option>
                <option value="Bar">Bar</option>
                <option value="Viewpoint">Viewpoint</option>
                <option value="CampSite">Camp Site</option>
                <option value="Bench">Bench</option>
                <option value="Info">Info</option>
                <option value="Parking">Parking</option>
                <option value="PicnicSite">Picnic Site</option>
                <option value="Fireplace">Fireplace</option>
                <option value="Ruin">Ruin</option>
                <option value="Summit">Summit</option>
                <option value="Waterfall">Waterfall</option>
                <option value="Bridge">Bridge</option>
                <option value="Gate">Gate</option>
                <option value="Cross">Cross</option>
                <option value="Cave">Cave</option>
                <option value="Danger">Danger</option>
                <option value="Signpost">Signpost</option>
            </select><br><small>Ctrl/Cmd to select multiple</small><br><br>
            <input type="hidden" id="pointLat"><input type="hidden" id="pointLon">
            <button type="submit">Add Point</button> <button type="button" onclick="closeAddSidebar()">Cancel</button>
        </form>
    </div>

    <div id="categoryMenu">
        <h3>Select categories</h3>
        <label><input type="checkbox" value="Generic"> Generic</label><br>
        <label><input type="checkbox" value="DrinkingWater"> Drinking Water</label><br>
        <label><input type="checkbox" value="Shelter"> Shelter</label><br>
        <label><input type="checkbox" value="Toilet"> Toilet</label><br>
        <label><input type="checkbox" value="Restaurant"> Restaurant</label><br>
        <label><input type="checkbox" value="Bar"> Bar</label><br>
        <label><input type="checkbox" value="Viewpoint"> Viewpoint</label><br>
        <label><input type="checkbox" value="CampSite"> Camp Site</label><br>
        <label><input type="checkbox" value="Bench"> Bench</label><br>
        <label><input type="checkbox" value="Info"> Info</label><br>
        <label><input type="checkbox" value="Parking"> Parking</label><br>
        <label><input type="checkbox" value="PicnicSite"> Picnic Site</label><br>
        <label><input type="checkbox" value="Fireplace"> Fireplace</label><br>
        <label><input type="checkbox" value="Ruin"> Ruin</label><br>
        <label><input type="checkbox" value="Summit"> Summit</label><br>
        <label><input type="checkbox" value="Waterfall"> Waterfall</label><br>
        <label><input type="checkbox" value="Bridge"> Bridge</label><br>
        <label><input type="checkbox" value="Gate"> Gate</label><br>
        <label><input type="checkbox" value="Cross"> Cross</label><br>
        <label><input type="checkbox" value="Cave"> Cave</label><br>
        <label><input type="checkbox" value="Danger"> Danger</label><br>
        <label><input type="checkbox" value="Signpost"> Signpost</label><br><br>
        <button onclick="applyCategoryFilter()">Apply Filter</button>
        <button onclick="closeCategorySelector()" style="background:darkred;color:white;">Exit</button>
    </div>

    <script>
        // Sources & Layers
        const poiSource = new ol.source.Vector();
        const poiLayer = new ol.layer.Vector({ source: poiSource, style: defaultPoiStyle });
        const circleSource = new ol.source.Vector();
        const circleLayer = new ol.layer.Vector({ source: circleSource, style: circleStyle });
        const map = new ol.Map({ target:'map', layers:[new ol.layer.Tile({source:new ol.source.OSM()}),circleLayer,poiLayer], view:new ol.View({center:ol.proj.fromLonLat([12.5,42.5]),zoom:6}) });

        // Styles
        function defaultPoiStyle(){return new ol.style.Style({image:new ol.style.Circle({radius:5,fill:new ol.style.Fill({color:'green'})})});}
        function highlightStyle(){return new ol.style.Style({image:new ol.style.Circle({radius:7,fill:new ol.style.Fill({color:'red'})})});}
        function circleStyle(){return new ol.style.Style({stroke:new ol.style.Stroke({color:'blue',width:2,lineDash:[4,4]})});}

        // Load All Points
        async function loadAllPoints(){
          poiSource.clear();
          const resp = await fetch('/api/pointsofinterestsapi/points');
          if(!resp.ok){ alert('Errore caricamento POI'); return; }
          const pois = await resp.json();
          const feats = pois.map(p=> new ol.Feature({geometry:new ol.geom.Point(ol.proj.fromLonLat([p.longitude,p.latitude])),name:p.name,id:p.id,latitude:p.latitude,longitude:p.longitude,categories:p.categories}));
          poiSource.addFeatures(feats);
        }

        // Category Filter
        function openCategorySelector(){document.getElementById('categoryMenu').style.display='block';}
        function closeCategorySelector(){document.getElementById('categoryMenu').style.display='none';}
        async function applyCategoryFilter(){
          poiSource.clear(); closeCategorySelector();
          const cats = Array.from(document.querySelectorAll('#categoryMenu input[type=checkbox]:checked')).map(ch=>ch.value);
          if(cats.length===0) return;
          let pois=[];
          for(const cat of cats){const resp=await fetch(`/api/pointsofinterestsapi/points?category=${encodeURIComponent(cat)}`); if(resp.ok) pois=pois.concat(await resp.json());}
          const feats=pois.map(p=>new ol.Feature({geometry:new ol.geom.Point(ol.proj.fromLonLat([p.longitude,p.latitude])),name:p.name,id:p.id,latitude:p.latitude,longitude:p.longitude,categories:p.categories}));
          poiSource.addFeatures(feats);
        }

        // Spatial Filter
        function enableSpatialFilter(){
          const draw=new ol.interaction.Draw({source:new ol.source.Vector(),type:'Polygon'});
          map.addInteraction(draw);
          draw.on('drawend',async evt=>{map.removeInteraction(draw);
            const coords=evt.feature.getGeometry().getCoordinates()[0].map(c=>ol.proj.toLonLat(c));
            const resp=await fetch('/api/pointsofinterestsapi/spatialfilter',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({geometry:{type:'Polygon',coordinates:[coords]}})});
            if(!resp.ok){alert('Errore filtro spaziale');return;}
            const pois=await resp.json();poiSource.clear();poiSource.addFeatures(pois.map(p=>new ol.Feature({geometry:new ol.geom.Point(ol.proj.fromLonLat([p.longitude,p.latitude])),name:p.name,id:p.id,latitude:p.latitude,longitude:p.longitude,categories:p.categories})));
          });
        }

        // Radius Search
        function radiusSearchMode(){
          map.once('click',evt=>{
            circleSource.clear(); poiSource.getFeatures().forEach(f=>f.setStyle(defaultPoiStyle()));
            const center=ol.proj.toLonLat(evt.coordinate);
            const r=parseFloat(prompt('Raggio in metri:','500')); if(isNaN(r)) return;
            circleSource.addFeature(new ol.Feature(new ol.geom.Circle(evt.coordinate,r)));
            poiSource.getFeatures().filter(f=>ol.sphere.getDistance(center,ol.proj.toLonLat(f.getGeometry().getCoordinates()))<=r).forEach(f=>f.setStyle(highlightStyle()));
          });
        }

        // Nearest neighbors
        function nearestSearchMode(){
          const n=parseInt(prompt('N punti più vicini:','5')); if(isNaN(n)||n<1) return;
          map.once('click',evt=>{
            poiSource.getFeatures().forEach(f=>f.setStyle(defaultPoiStyle()));
            const ref=ol.proj.toLonLat(evt.coordinate);
            const arr=poiSource.getFeatures().map(f=>({f,d:ol.sphere.getDistance(ref,ol.proj.toLonLat(f.getGeometry().getCoordinates()))}));
            arr.sort((a,b)=>a.d-b.d);
            arr.slice(0,n).forEach(o=>o.f.setStyle(highlightStyle()));
          });
        }

        // Info & CRUD
        map.on('singleclick',evt=>{map.forEachFeatureAtPixel(evt.pixel,(f,l)=>{if(l===poiLayer){
          document.getElementById('infoName').textContent=f.get('name');
          document.getElementById('infoLat').textContent=f.get('latitude').toFixed(6);
          document.getElementById('infoLon').textContent=f.get('longitude').toFixed(6);
          document.getElementById('infoCat').textContent=f.get('categories').join(', ');
          document.getElementById('infoPointId').value=f.get('id');
          document.getElementById('infoSidebar').style.display='block';
        }})});
        function closeInfoSidebar(){document.getElementById('infoSidebar').style.display='none';}
        async function deletePoint(){const id=document.getElementById('infoPointId').value; if(!id||!confirm('Confermi eliminazione?'))return; await fetch(`/api/pointsofinterestsapi/points/${id}`,{method:'DELETE'}); poiSource.getFeatures().filter(f=>f.get('id')==id).forEach(f=>poiSource.removeFeature(f)); closeInfoSidebar();}


        // Add Point
        let addMode=false;
        function addPoint(){
          addMode=true; alert('Click map to place new point');
          map.once('click',evt=>{
            if(!addMode) return;
            const [lon,lat] = ol.proj.toLonLat(evt.coordinate);
            document.getElementById('pointLon').value=lon;
            document.getElementById('pointLat').value=lat;
            document.getElementById('addSidebar').style.display='block';
            addMode=false;
          });
        }
        function closeAddSidebar(){ document.getElementById('addSidebar').style.display='none'; document.getElementById('addPointForm').reset(); }
        async function submitNewPoint(e){
          e.preventDefault();
          const name=document.getElementById('pointName').value;
          const desc=document.getElementById('pointDescription').value;
          const lat=parseFloat(document.getElementById('pointLat').value);
          const lon=parseFloat(document.getElementById('pointLon').value);
          const cats=Array.from(document.getElementById('pointCategories').selectedOptions).map(o=>o.value);
          if(!cats.length){ alert('Select at least one category'); return; }
          const res=await fetch('/api/pointsofinterestsapi/post',{ method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify({ name, description:desc, latitude:lat, longitude:lon, categories:cats })});
          if(res.ok){ alert('Point added'); closeAddSidebar(); loadSelectedCategories(); } else alert('Failed to add');
        }

        // Edit Mode
        function enablePointEditMode(){
          const feats=poiSource.getFeatures();
          const modify=new ol.interaction.Modify({ features:new ol.Collection(feats)});
          map.addInteraction(modify);
          modify.on('modifyend',async e=>{
            for(const f of e.features.getArray()){ const [lon,lat]=ol.proj.toLonLat(f.getGeometry().getCoordinates()); await fetch(`/api/pointsofinterestsapi/points/${f.get('id')}`,{ method:'PUT', headers:{'Content-Type':'application/json'}, body:JSON.stringify({ latitude:lat, longitude:lon })}); }
            alert('Points updated'); map.removeInteraction(modify);
          });
        }

        // Spatial Filter
        let drawFilter=null;
        function enableSpatialFilter(){
          if(drawFilter) map.removeInteraction(drawFilter);
          drawFilter=new ol.interaction.Draw({ source:new ol.source.Vector(), type:'Polygon'});
          map.addInteraction(drawFilter);
          drawFilter.on('drawend',async evt=>{
            map.removeInteraction(drawFilter);
            const coords=evt.feature.getGeometry().getCoordinates()[0].map(c=>ol.proj.toLonLat(c));
            const res=await fetch('/api/pointsofinterestsapi/spatialfilter',{ method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify({ geometry:{ type:'Polygon', coordinates:[coords] } })});
            const pois=await res.json(); poiSource.clear(); poiSource.addFeatures(pois.map(p=>new ol.Feature({ geometry:new ol.geom.Point(ol.proj.fromLonLat([p.longitude,p.latitude])), name:p.name, id:p.id, latitude:p.latitude, longitude:p.longitude, categories:p.categories })));    });
          alert('Draw polygon to filter POI');
        }

        // Radius Search
        function radiusSearchMode(){
          alert('Click map for buffer center');
          map.once('click',evt=>{
            circleSource.clear(); poiSource.getFeatures().forEach(f=>f.setStyle(defaultPoiStyle()));
            const center=ol.proj.toLonLat(evt.coordinate);
            const r=parseFloat(prompt('Radius meters:','500'));
            if(isNaN(r)){ alert('Invalid'); return; }
            circleSource.addFeature(new ol.Feature(new ol.geom.Circle(evt.coordinate,r)));
            poiSource.getFeatures().filter(f=>ol.sphere.getDistance(center,ol.proj.toLonLat(f.getGeometry().getCoordinates()))<=r).forEach(f=>f.setStyle(highlightStyle()));
            alert(`Found ${poiSource.getFeatures().filter(f=>f.getStyle()===highlightStyle()).length}`);
          });
        }

        // Nearest neighbors
        function nearestSearchMode(){
          const n=parseInt(prompt('N nearest POI:','5'));
          if(isNaN(n)||n<1){ alert('Invalid'); return; }
          alert('Click map for reference');
          map.once('click',evt=>{
            poiSource.getFeatures().forEach(f=>f.setStyle(defaultPoiStyle()));
            const ref=ol.proj.toLonLat(evt.coordinate);
            const arr=poiSource.getFeatures().map(f=>({ f, d:ol.sphere.getDistance(ref,ol.proj.toLonLat(f.getGeometry().getCoordinates())) }));
            arr.sort((a,b)=>a.d-b.d);
            arr.slice(0,n).forEach(o=>o.f.setStyle(highlightStyle()));
            alert(`Selected ${Math.min(n,arr.length)}`);
          });
        }
    </script>
</body>
</html>
