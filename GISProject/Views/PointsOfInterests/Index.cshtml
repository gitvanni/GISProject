@{
    ViewData["Title"] = "Mappa dei Punti di Interesse Dinamica";
}

<h2>@ViewData["Title"]</h2>

<script src="https://cdn.jsdelivr.net/npm/ol@7.3.0/dist/ol.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol@7.3.0/ol.css" />
<style>
    .category-buttons {
        margin-bottom: 1rem;
        display: flex;
        gap: 1rem;
        justify-content: center;
    }

        .category-buttons a {
            text-decoration: none;
            padding: 10px 20px;
            background-color: #0078D7;
            color: white;
            border-radius: 5px;
            font-weight: bold;
            transition: background-color 0.3s;
        }

            .category-buttons a:hover {
                background-color: #005fa3;
            }
</style>
<div class="category-buttons">
    <a href="#" onclick="loadPoint('21')">Show Signposts</a>
    <a href="#" onclick="loadPoint('20')">Show Danger Points</a>
    <a href="#" onclick="loadPoint('9')">Show Info Points</a>
    <a href="#" onclick="loadPoint('1')">Show New Point</a> 
</div>
<div id="map" style="width: 100%; height: 600px;"></div>

<script>
    let vectorSource = new ol.source.Vector();

    const vectorLayer = new ol.layer.Vector({
        source: vectorSource,
        style: new ol.style.Style({
            image: new ol.style.Circle({
                radius: 3,
                fill: new ol.style.Fill({ color: 'green' }),
                stroke: null
            })
        })
    });

    const map = new ol.Map({
        target: 'map',
        layers: [
            new ol.layer.Tile({ source: new ol.source.OSM() }),
            vectorLayer
        ],
        view: new ol.View({
            center: ol.proj.fromLonLat([12.5, 42.5]),
            zoom: 6
        })
    });


    //Aggiunge il punto alla mappa. Per il momento è hardcoded 
        // TODO: Permettere all'utente di specificare nome,categoria, ecc.
    async function savePointToDb(lat, lon) {
        const data = {
            name: "User Point", 
            geometry: {
                type: "Point",
                coordinates: [lon, lat]
            },
            poiCategories: [
                {
                    category: "1" 
                }
            ]
        };

        console.log(data);

        const response = await fetch('../../api/pointsofinterestsapi/post', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
        console.log(response);
        if (response.ok) {
            alert("Point saved!");
        } else {
            alert("Error saving point.");
        }
    }


    //Ogni volta che l'utente clicca la mappa viene chiamata la funzione per aggiungere il punto
    map.on('click', async function (event) {
            const coordinate = ol.proj.toLonLat(event.coordinate);
            const lon = coordinate[0];
            const lat = coordinate[1];

            // Draw point on map
            const feature = new ol.Feature({
                geometry: new ol.geom.Point(event.coordinate)
            });
            vectorLayer.getSource().addFeature(feature);

            // Save to DB
            await savePointToDb(lat, lon);
        });

    async function loadPoint(param){
        const url = `../../api/pointsofinterestsapi/points?category=${param}`;
        const response = await fetch(url);
        
        const pois = await response.json();
        const features = pois.map(poi => {
            const geometry = new ol.geom.Point(ol.proj.fromLonLat([poi.longitude, poi.latitude]));
            const feature = new ol.Feature({ geometry, name: poi.name });
            return feature;
        });

        vectorSource.clear();
        vectorSource.addFeatures(features);
    }




/*
    async function loadPoisFromExtent() {
        const extent = map.getView().calculateExtent(map.getSize());
        const bottomLeft = ol.proj.toLonLat(ol.extent.getBottomLeft(extent));
        const topRight = ol.proj.toLonLat(ol.extent.getTopRight(extent));

        const url = `../../api/pointsofinterestsapi?minLon=${bottomLeft[0]}&minLat=${bottomLeft[1]}&maxLon=${topRight[0]}&maxLat=${topRight[1]}`;
        const response = await fetch(url);
        const pois = await response.json();

        const features = pois.map(poi => {
            const geometry = new ol.geom.Point(ol.proj.fromLonLat([poi.longitude, poi.latitude]));
            const feature = new ol.Feature({ geometry, name: poi.name });
            return feature;
        });

        vectorSource.clear();
        vectorSource.addFeatures(features);
    }

    map.on('moveend', loadPoisFromExtent);
    window.addEventListener('DOMContentLoaded', loadPoisFromExtent);
    */
</script>
