@{
    ViewData["Title"] = "Mappa Dinamica dei Trail";
}

<h2>@ViewData["Title"]</h2>

<script src="https://cdn.jsdelivr.net/npm/ol@7.3.0/dist/ol.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol@7.3.0/ol.css" />

<div id="map" style="width: 100%; height: 600px;"></div>

<script>
    let vectorSource = new ol.source.Vector();

    const vectorLayer = new ol.layer.Vector({
        source: vectorSource,
        style: new ol.style.Style({
            stroke: new ol.style.Stroke({
                color: 'blue',
                width: 2
            })
        })
    });

    const map = new ol.Map({
        target: 'map',
        layers: [
            new ol.layer.Tile({ source: new ol.source.OSM() }),
            vectorLayer
        ],
        view: new ol.View({
            center: ol.proj.fromLonLat([12.5, 42.5]),
            zoom: 6
        })
    });

    async function loadTrailsFromMapExtent() {
        const extent = map.getView().calculateExtent(map.getSize());
        const bottomLeft = ol.proj.toLonLat(ol.extent.getBottomLeft(extent));
        const topRight = ol.proj.toLonLat(ol.extent.getTopRight(extent));

        const url = `/api/trailsapi?minLon=${bottomLeft[0]}&minLat=${bottomLeft[1]}&maxLon=${topRight[0]}&maxLat=${topRight[1]}`;
        const response = await fetch(url);
        const trails = await response.json();

        const features = trails.map(t => {
            const coords = t.coordinates.map(c => ol.proj.fromLonLat([c.longitude, c.latitude]));
            const line = new ol.geom.LineString(coords);
            const feature = new ol.Feature({ geometry: line, name: t.name });
            return feature;
        });

        vectorSource.clear();
        vectorSource.addFeatures(features);
    }

    map.on('moveend', loadTrailsFromMapExtent);
    window.addEventListener('DOMContentLoaded', loadTrailsFromMapExtent);
</script>
